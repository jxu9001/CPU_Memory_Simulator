// displays the first 20 fibonacci numbers
.0
1	// AC = 20 (since we are displaying the first 20 fibonacci numbers)
20
14  // X = 20
1	// AC = 0
0
7 	// memory[100] = 0
100
1   // AC = 1
1
7 	// memory[200] = 0
200
16	// Y = 1
2	// AC = memory[50]
100
9	// print AC as an int
1
23  // push addr 300 onto the stack and jump there. memory[300] contains a subroutine that prints a /n
300
2	// AC = memory[200]
200
16	// Y = AC
2	// AC = memory[50]
100
11	// AC += Y
7	// memory[50] = AC
100
2	// AC = memory[200]
200
16	// Y = AC
2	// AC = memory[100]
100
13	// AC -= Y
7	// memory[200] = AC
200
26	// X -= 1
15 	// AC = X
22	// jump to memory[300] if AC != 0
12  // AC -= X
50  // End

.300
27	// stack.push(AC)
1   // AC = 10
10
9	// print 10 as char, 10 in the ascii table is /n
2
28	// AC = stack.pop()
24	// pop return address from stack and jump there

.1000
30